/* MachinePlayer.java */

package player;
import list.*;

/**
 *  An implementation of an automatic Network player.  Keeps track of moves
 *  made by both players.  Can select a move for itself.
 */
public class MachinePlayer extends Player {

    protected int playerColor;
    protected int playerDepth;
    protected GameBoard myBoard;

  // Creates a machine player with the given color.  Color is either 0 (black)
  // or 1 (white).  (White has the first move.)
  public MachinePlayer(int color) {
      playerColor = color;
      myBoard = new GameBoard();
  }

  // Creates a machine player with the given color and search depth.  Color is
  // either 0 (black) or 1 (white).  (White has the first move.)
  public MachinePlayer(int color, int searchDepth) {
      playerColor = color;
      playerDepth = searchDepth;
      myBoard = new GameBoard();
  }

  // Returns a new move by "this" player.  Internally records the move (updates
  // the internal game board) as a move by "this" player.
  public Move chooseMove() {
      return new Move();
      /*	if (VALID(m)) {
	    if (m.moveKind == ADD) {
		myBoard.addChip(m.x1, m.y1, playerColor); 
	    } else if (m.moveKind == STEP) {
		myBoard.moveChip(m.x1, m.y1, m.x2, m.y2, playerColor); 
	    }
	}
      */
  } 

  // If the Move m is legal, records the move as a move by the opponent
  // (updates the internal game board) and returns true.  If the move is
  // illegal, returns false without modifying the internal state of "this"
  // player.  This method allows your opponents to inform you of their moves.
  public boolean opponentMove(Move m) {
      int opColor;
      if (playerColor == 0) {
          opColor = 1;
      } else {
          opColor = 0;
      }
      if (myBoard.VALID(m)) {
	  if (m.moveKind == 1) {
	      myBoard.addChip(m.x1, m.y1, opColor);
	  }
	  else if (m.moveKind == 2) {
	      myBoard.moveChip(m.x1, m.y1, m.x2, m.y2, opColor);
	  }
	  return true;
      }
      return false;
  }

  // If the Move m is legal, records the move as a move by "this" player
  // (updates the internal game board) and returns true.  If the move is
  // illegal, returns false without modifying the internal state of "this"
  // player.  This method is used to help set up "Network problems" for your
  // player to solve.
    public boolean forceMove(Move m) {
	if (myBoard.VALID(m)) {
	    // ADDmoves
	    if (m.moveKind == 1) {
		myBoard.addChip(m.x1, m.y1, playerColor);
		//STEPmoves
	    } else if (m.moveKind == 2) {
		myBoard.moveChip(m.x1, m.y1, m.x2, m.y2, playerColor);
	    }
	    return true;
	}
	return false;
    }
    
    public static void TestValidMove() {
        MachinePlayer myPlayer = new MachinePlayer(0);
        Move m1 = new Move (0,0);
        Move m2 = new Move (7,0);
        Move m3 = new Move (0,7);
        Move m4 = new Move (7,7);
        if (myPlayer.myBoard.VALID(m1) || myPlayer.myBoard.VALID(m2) || myPlayer.myBoard.VALID(m3) || myPlayer.myBoard.VALID(m4)) {
            System.out.println("corner shouldnt be valid!!");
        }
        Move m5 = new Move (1,0);
        //(1,0) is now black;
        myPlayer.forceMove(m5);
        if (myPlayer.myBoard.VALID(m5)) {
            System.out.println("trying to move to a place that was occupied!!");
        }
    }

    public static void main() {
        TestValidMove();
    }
}
